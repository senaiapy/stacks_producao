version: "3.8"

services:
  # PostgreSQL Database Setup and Migration Service
  supabase_db_migration:
    image: supabase/postgres:15.8.1.049
    hostname: "{{.Service.Name}}.{{.Task.Slot}}"

    networks:
      - app_network

    volumes:
      # Temporary volumes for migration scripts
      - /tmp/supabase_migration_scripts:/migration_scripts:rw

    environment:
      # Database connection settings
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: chatwoot_database
      POSTGRES_USER: chatwoot_database
      POSTGRES_PASSWORD: Ma1x1x0x!!Ma1x1x0x!!
      PGPASSWORD: Ma1x1x0x!!Ma1x1x0x!!

      # Supabase specific settings
      JWT_SECRET: DV7ztkuZnEJWWKQ68haLZ2qIXCMRxODz
      JWT_EXP: 3600

    command:
      - /bin/bash
      - -c
      - |
        echo '=== Starting Supabase Database Migration ==='

        # Wait for PostgreSQL to be ready
        until pg_isready -h postgres -p 5432 -U chatwoot_database; do
          echo 'Waiting for PostgreSQL to be ready...'
          sleep 2
        done

        echo '=== PostgreSQL is ready, starting migration ==='

        # Create SQL script for migration
        cat > /tmp/migration.sql << 'SQLEOF'

        -- Create Supabase extensions (skip if they don't exist)
        DO $$ BEGIN
          BEGIN
            CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
            CREATE EXTENSION IF NOT EXISTS "pgcrypto";
          EXCEPTION WHEN OTHERS THEN
            RAISE NOTICE 'Some extensions could not be created: %', SQLERRM;
          END;
        END $$;

        -- Create Supabase schemas
        CREATE SCHEMA IF NOT EXISTS "auth";
        CREATE SCHEMA IF NOT EXISTS "storage";
        CREATE SCHEMA IF NOT EXISTS "realtime";
        CREATE SCHEMA IF NOT EXISTS "_realtime";
        CREATE SCHEMA IF NOT EXISTS "_analytics";
        CREATE SCHEMA IF NOT EXISTS "_supabase";
        CREATE SCHEMA IF NOT EXISTS "graphql";
        CREATE SCHEMA IF NOT EXISTS "graphql_public";
        CREATE SCHEMA IF NOT EXISTS "vault";
        CREATE SCHEMA IF NOT EXISTS "extensions";
        CREATE SCHEMA IF NOT EXISTS "supabase_functions";
        CREATE SCHEMA IF NOT EXISTS "supabase_migrations";

        -- Grant schema permissions to main user
        GRANT ALL ON SCHEMA auth TO chatwoot_database;
        GRANT ALL ON SCHEMA storage TO chatwoot_database;
        GRANT ALL ON SCHEMA realtime TO chatwoot_database;
        GRANT ALL ON SCHEMA _realtime TO chatwoot_database;
        GRANT ALL ON SCHEMA _analytics TO chatwoot_database;
        GRANT ALL ON SCHEMA _supabase TO chatwoot_database;
        GRANT ALL ON SCHEMA graphql TO chatwoot_database;
        GRANT ALL ON SCHEMA graphql_public TO chatwoot_database;
        GRANT ALL ON SCHEMA vault TO chatwoot_database;
        GRANT ALL ON SCHEMA extensions TO chatwoot_database;
        GRANT ALL ON SCHEMA supabase_functions TO chatwoot_database;
        GRANT ALL ON SCHEMA supabase_migrations TO chatwoot_database;

        -- Create Realtime specific tables to avoid migration issues
        CREATE TABLE IF NOT EXISTS _realtime.schema_migrations (
          version bigint PRIMARY KEY,
          inserted_at timestamp DEFAULT NOW()
        );

        ALTER TABLE _realtime.schema_migrations OWNER TO chatwoot_database;
        GRANT ALL ON _realtime.schema_migrations TO chatwoot_database;

        -- Create basic storage tables
        CREATE TABLE IF NOT EXISTS storage.buckets (
          id text PRIMARY KEY,
          name text NOT NULL,
          owner uuid,
          created_at timestamptz DEFAULT NOW(),
          updated_at timestamptz DEFAULT NOW(),
          public boolean DEFAULT false
        );

        CREATE TABLE IF NOT EXISTS storage.objects (
          id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
          bucket_id text REFERENCES storage.buckets(id),
          name text,
          owner uuid,
          created_at timestamptz DEFAULT NOW(),
          updated_at timestamptz DEFAULT NOW(),
          metadata jsonb
        );

        ALTER TABLE storage.buckets OWNER TO supabase_storage_admin;
        ALTER TABLE storage.objects OWNER TO supabase_storage_admin;

        -- Grant default privileges for future objects in _realtime schema
        ALTER DEFAULT PRIVILEGES IN SCHEMA _realtime GRANT ALL ON TABLES TO chatwoot_database;
        ALTER DEFAULT PRIVILEGES IN SCHEMA _realtime GRANT ALL ON SEQUENCES TO chatwoot_database;
        ALTER DEFAULT PRIVILEGES IN SCHEMA _realtime GRANT ALL ON FUNCTIONS TO chatwoot_database;

        -- Create basic roles if they don't exist
        DO $$
        BEGIN
          IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'anon') THEN
            CREATE ROLE anon;
          END IF;

          IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'authenticated') THEN
            CREATE ROLE authenticated;
          END IF;

          IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'service_role') THEN
            CREATE ROLE service_role;
          END IF;

          -- Create authenticator user for PostgREST
          IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'authenticator') THEN
            CREATE ROLE authenticator LOGIN PASSWORD 'Ma1x1x0x!!Ma1x1x0x!!';
          END IF;

          -- Create supabase_storage_admin user for Storage API
          IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'supabase_storage_admin') THEN
            CREATE ROLE supabase_storage_admin LOGIN PASSWORD 'Ma1x1x0x!!Ma1x1x0x!!';
          END IF;

          -- Grant roles to authenticator
          GRANT anon TO authenticator;
          GRANT authenticated TO authenticator;
          GRANT service_role TO authenticator;

          -- Grant schema access to authenticator
          GRANT USAGE ON SCHEMA public TO authenticator;
          GRANT USAGE ON SCHEMA storage TO authenticator;
          GRANT USAGE ON SCHEMA graphql_public TO authenticator;

          -- Grant storage schema permissions to supabase_storage_admin
          GRANT ALL ON SCHEMA storage TO supabase_storage_admin;
          GRANT ALL ON ALL TABLES IN SCHEMA storage TO supabase_storage_admin;
          GRANT ALL ON ALL SEQUENCES IN SCHEMA storage TO supabase_storage_admin;
          GRANT ALL ON ALL FUNCTIONS IN SCHEMA storage TO supabase_storage_admin;

          -- Grant additional permissions for PostgREST
          GRANT SELECT ON ALL TABLES IN SCHEMA public TO anon, authenticated;
          GRANT SELECT ON ALL TABLES IN SCHEMA storage TO anon, authenticated;
          GRANT SELECT ON ALL TABLES IN SCHEMA graphql_public TO anon, authenticated;

          -- Grant basic permissions to existing user
          GRANT USAGE ON SCHEMA public TO chatwoot_database;
          GRANT ALL ON ALL TABLES IN SCHEMA public TO chatwoot_database;
          GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO chatwoot_database;
          GRANT ALL ON ALL FUNCTIONS IN SCHEMA public TO chatwoot_database;

          -- Make sure user can create tables in _realtime schema
          GRANT USAGE, CREATE ON SCHEMA _realtime TO chatwoot_database;
          GRANT ALL ON ALL TABLES IN SCHEMA _realtime TO chatwoot_database;
          GRANT ALL ON ALL SEQUENCES IN SCHEMA _realtime TO chatwoot_database;
        END
        $$;

        -- Set up Row Level Security (RLS)
        ALTER DEFAULT PRIVILEGES REVOKE EXECUTE ON FUNCTIONS FROM PUBLIC;
        ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO anon, authenticated, service_role;
        ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON FUNCTIONS TO anon, authenticated, service_role;
        ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO anon, authenticated, service_role;

        -- Set JWT configuration
        ALTER DATABASE postgres SET "app.jwt_secret" TO 'DV7ztkuZnEJWWKQ68haLZ2qIXCMRxODz';
        ALTER DATABASE postgres SET "app.jwt_exp" TO '3600';

        -- Notify completion
        SELECT 'Supabase database migration completed successfully!' as status;

        SQLEOF

        # Run the migration
        PGPASSWORD=Ma1x1x0x!!Ma1x1x0x!! psql -h postgres -p 5432 -U chatwoot_database -d chatwoot_database -f /tmp/migration.sql

        echo '=== Database migration completed successfully ==='
        echo '=== Supabase roles and schemas are now ready ==='
        echo '=== You can now deploy the supabase.yml stack ==='

        # Keep container running for log inspection
        sleep 300

    deploy:
      mode: replicated
      replicas: 1

      placement:
        constraints:
          - node.role == manager

      resources:
        limits:
          cpus: '1.0'
          memory: 1024M
        reservations:
          cpus: '0.5'
          memory: 512M

      restart_policy:
        condition: none

  # Optional: Analytics Database Setup
  supabase_analytics_migration:
    image: postgres:16
    hostname: "{{.Service.Name}}.{{.Task.Slot}}"

    networks:
      - app_network

    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: chatwoot_database
      POSTGRES_USER: chatwoot_database
      POSTGRES_PASSWORD: Ma1x1x0x!!Ma1x1x0x!!
      PGPASSWORD: Ma1x1x0x!!Ma1x1x0x!!

    command:
      - /bin/bash
      - -c
      - |
        echo '=== Starting Analytics Schema Migration ==='

        # Wait for main migration to complete
        sleep 30

        # Wait for PostgreSQL to be ready
        until pg_isready -h postgres -p 5432 -U chatwoot_database; do
          echo 'Waiting for PostgreSQL to be ready...'
          sleep 2
        done

        echo '=== Setting up Analytics Schema ==='

        # Create analytics schema script
        cat > /tmp/analytics.sql << 'ANAEOF'

        -- Create analytics schema
        CREATE SCHEMA IF NOT EXISTS _analytics;

        -- Grant permissions
        GRANT ALL ON SCHEMA _analytics TO supabase_admin;

        -- Create basic tables for analytics
        CREATE TABLE IF NOT EXISTS _analytics.page_views (
          id bigserial PRIMARY KEY,
          page_url text,
          referer text,
          user_agent text,
          timestamp timestamptz DEFAULT now()
        );

        ALTER TABLE _analytics.page_views OWNER TO supabase_admin;

        SELECT 'Analytics schema setup completed!' as status;

        ANAEOF

        # Run analytics migration
        PGPASSWORD=Ma1x1x0x!!Ma1x1x0x!! psql -h postgres -p 5432 -U chatwoot_database -d chatwoot_database -f /tmp/analytics.sql

        echo '=== Analytics migration completed ==='

        # Keep container running for log inspection
        sleep 300

    depends_on:
      - supabase_db_migration

    deploy:
      mode: replicated
      replicas: 1

      placement:
        constraints:
          - node.role == manager

      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

      restart_policy:
        condition: none

networks:
  app_network:
    driver: overlay
    external: true

# Instructions:
# 1. Ensure PostgreSQL stack is running: docker stack deploy -c postgres.yml postgres
# 2. Run this migration: docker stack deploy -c supabase-migration.yml supabase-migration
# 3. Monitor migration: docker service logs -f supabase-migration_supabase_db_migration
# 4. After completion, deploy Supabase: docker stack deploy -c supabase.yml supabase
# 5. Clean up migration: docker stack rm supabase-migration