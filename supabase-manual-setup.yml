version: "3.8"

services:
  supabase_manual_setup:
    image: postgres:16
    networks:
      - app_network

    environment:
      PGPASSWORD: Ma1x1x0x!!Ma1x1x0x!!

    command: |
      bash -c "
      echo '=== Manual Supabase Setup ==='

      # Wait for PostgreSQL
      until pg_isready -h postgres -p 5432 -U chatwoot_database; do
        echo 'Waiting for PostgreSQL...'
        sleep 2
      done

      echo '=== PostgreSQL ready, creating users ==='

      # Create the SQL commands directly
      PGPASSWORD=Ma1x1x0x!!Ma1x1x0x!! psql -h postgres -p 5432 -U chatwoot_database -d chatwoot_database << 'EOF'

      -- Create roles if they don't exist
      DO \$\$ BEGIN
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'anon') THEN
          CREATE ROLE anon;
        END IF;
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'authenticated') THEN
          CREATE ROLE authenticated;
        END IF;
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'service_role') THEN
          CREATE ROLE service_role;
        END IF;
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'authenticator') THEN
          CREATE ROLE authenticator LOGIN PASSWORD 'Ma1x1x0x!!Ma1x1x0x!!';
        END IF;
        IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'supabase_storage_admin') THEN
          CREATE ROLE supabase_storage_admin LOGIN PASSWORD 'Ma1x1x0x!!Ma1x1x0x!!';
        END IF;
      END \$\$;

      -- Grant roles
      GRANT anon TO authenticator;
      GRANT authenticated TO authenticator;
      GRANT service_role TO authenticator;

      -- Create schemas
      CREATE SCHEMA IF NOT EXISTS storage;
      CREATE SCHEMA IF NOT EXISTS _realtime;
      CREATE SCHEMA IF NOT EXISTS graphql_public;
      CREATE SCHEMA IF NOT EXISTS auth;

      -- Grant schema permissions
      GRANT ALL ON SCHEMA storage TO supabase_storage_admin;
      GRANT ALL ON SCHEMA _realtime TO chatwoot_database;
      GRANT USAGE ON SCHEMA public TO authenticator;
      GRANT USAGE ON SCHEMA storage TO authenticator;
      GRANT USAGE ON SCHEMA graphql_public TO authenticator;
      GRANT USAGE ON SCHEMA _realtime TO authenticator;

      -- Grant _realtime schema to database user for migrations
      GRANT USAGE, CREATE ON SCHEMA _realtime TO chatwoot_database;
      ALTER DEFAULT PRIVILEGES IN SCHEMA _realtime GRANT ALL ON TABLES TO chatwoot_database;

      -- Create storage tables
      CREATE TABLE IF NOT EXISTS storage.buckets (
        id text PRIMARY KEY,
        name text NOT NULL,
        owner uuid,
        created_at timestamptz DEFAULT NOW(),
        updated_at timestamptz DEFAULT NOW(),
        public boolean DEFAULT false
      );

      CREATE TABLE IF NOT EXISTS storage.objects (
        id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
        bucket_id text REFERENCES storage.buckets(id),
        name text,
        owner uuid,
        created_at timestamptz DEFAULT NOW(),
        updated_at timestamptz DEFAULT NOW(),
        metadata jsonb
      );

      ALTER TABLE storage.buckets OWNER TO supabase_storage_admin;
      ALTER TABLE storage.objects OWNER TO supabase_storage_admin;
      GRANT ALL ON ALL TABLES IN SCHEMA storage TO supabase_storage_admin;

      -- Create realtime migration table and basic structure
      CREATE TABLE IF NOT EXISTS _realtime.schema_migrations (
        version bigint PRIMARY KEY,
        inserted_at timestamp DEFAULT NOW()
      );

      -- Create basic realtime tables to avoid migration conflicts
      CREATE TABLE IF NOT EXISTS _realtime.subscription (
        id serial PRIMARY KEY,
        subscription_id uuid NOT NULL,
        entity regclass NOT NULL,
        filters text[] DEFAULT '{}' NOT NULL,
        claims jsonb NOT NULL,
        claims_role text GENERATED ALWAYS AS (COALESCE(claims ->> 'role', 'authenticated')) STORED NOT NULL,
        created_at timestamp DEFAULT timezone('utc', now()) NOT NULL
      );

      CREATE TABLE IF NOT EXISTS _realtime.extensions (
        id serial PRIMARY KEY,
        type text,
        name text,
        config jsonb
      );

      ALTER TABLE _realtime.schema_migrations OWNER TO chatwoot_database;
      ALTER TABLE _realtime.subscription OWNER TO chatwoot_database;
      ALTER TABLE _realtime.extensions OWNER TO chatwoot_database;

      GRANT ALL ON ALL TABLES IN SCHEMA _realtime TO chatwoot_database;
      GRANT ALL ON ALL SEQUENCES IN SCHEMA _realtime TO chatwoot_database;

      SELECT 'Setup completed successfully!' as result;

      EOF

      echo '=== Manual setup completed ==='
      echo '=== You can now deploy supabase.yml ==='
      sleep 60
      "

    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: none

networks:
  app_network:
    external: true